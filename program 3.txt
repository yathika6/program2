#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int front, rear;
    int items[MAX];
} Queue;

void initQueue(Queue* q) {
    q->front = 0;
    q->rear = -1;
}

int isEmpty(Queue* q) {
    return q->rear < q->front;
}

void enqueue(Queue* q, int item) {
    if (q->rear == MAX - 1) {
        printf("Queue is full\n");
        return;
    }
    q->items[++(q->rear)] = item;
}

int dequeue(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    return q->items[(q->front)++];
}

int peek(Queue* q) {
    if (isEmpty(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    return q->items[q->front];
}

void topologicalSort(int vertices, int adjMatrix[vertices][vertices]) {
    int inDegree[vertices];
    Queue q;
    initQueue(&q);
    
    for (int i = 0; i < vertices; i++) {
        inDegree[i] = 0;
    }
    
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            if (adjMatrix[j][i] == 1) {
                inDegree[i]++;
            }
        }
    }
    
    for (int i = 0; i < vertices; i++) {
        if (inDegree[i] == 0) {
            enqueue(&q, i);
        }
    }
    
    int count = 0;
    printf("Topological Order:\n");
    while (!isEmpty(&q)) {
        int u = dequeue(&q);
        printf("%d ", u);
        count++;
        
        for (int i = 0; i < vertices; i++) {
            if (adjMatrix[u][i] == 1) {
                if (--inDegree[i] == 0) {
                    enqueue(&q, i);
                }
            }
        }
    }
    
    if (count != vertices) {
        printf("\nThe graph has a cycle\n");
    } else {
        printf("\nTopological sorting completed\n");
    }
}

int main() {
    int vertices = 6;
    int adjMatrix[6][6] = {
        {0, 1, 1, 0, 0, 0},
        {0, 0, 0, 1, 1, 0},
        {0, 0, 0, 0, 1, 0},
        {0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 1},
        {0, 0, 0, 0, 0, 0}
    };

    topologicalSort(vertices, adjMatrix);

    return 0;
}
