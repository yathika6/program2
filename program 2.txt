#include <stdio.h>
#include <string.h>

void computeLPSArray(const char *pattern, int *lps) {
    int length = strlen(pattern);
    int lengthLPS = 0; // Length of the previous longest prefix suffix
    lps[0] = 0; // LPS[0] is always 0

    int i = 1;
    while (i < length) {
        if (pattern[i] == pattern[lengthLPS]) {
            lengthLPS++;
            lps[i] = lengthLPS;
            i++;
        } else {
            if (lengthLPS != 0) {
                lengthLPS = lps[lengthLPS - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

void KMPSearch(const char *text, const char *pattern) {
    int m = strlen(pattern);
    int n = strlen(text);

    int lps[m];

    computeLPSArray(pattern, lps);

    int i = 0; 
    int j = 0; 

    while (i < n) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }

        if (j == m) {
            printf("Pattern found at index %d\n", i - j);
            j = lps[j - 1];
        } else if (i < n && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
}

int main() {
    char text[] = "ABABDABACDABABCABAB";
    char pattern[] = "ABABCABAB";

    KMPSearch(text, pattern);

    return 0;
}

