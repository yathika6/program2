#include <stdio.h>
#include <stdlib.h>
#include <time.h>
 
// Function prototypes
void bubbleSort(int arr[], int n);
void quickSort(int arr[], int low, int high);
void mergeSort(int arr[], int left, int right);
void measureTime(void (*sortFunction)(int[], int), int arr[], int n, const char *algorithmName);
 
// Utility function to swap elements
void swap(int *a, int *b) {
   int temp = *a;
   *a = *b;
   *b = temp;
}
 
// Bubble Sort
void bubbleSort(int arr[], int n) {
   for (int i = 0; i < n - 1; i++) {
       for (int j = 0; j < n - i - 1; j++) {
           if (arr[j] > arr[j + 1]) {
               swap(&arr[j], &arr[j + 1]);
           }
       }
   }
}
 
// Quick Sort
int partition(int arr[], int low, int high) {
   int pivot = arr[high];
   int i = (low - 1);
   for (int j = low; j <= high - 1; j++) {
       if (arr[j] < pivot) {
           i++;
           swap(&arr[i], &arr[j]);
       }
   }
   swap(&arr[i + 1], &arr[high]);
   return (i + 1);
}
 
void quickSort(int arr[], int low, int high) {
   if (low < high) {
       int pi = partition(arr, low, high);
       quickSort(arr, low, pi - 1);
       quickSort(arr, pi + 1, high);
   }
}
 
// Merge Sort
void merge(int arr[], int left, int mid, int right) {
   int n1 = mid - left + 1;
   int n2 = right - mid;
   
   int *L = (int *)malloc(n1 * sizeof(int));
   int *R = (int *)malloc(n2 * sizeof(int));
 
   for (int i = 0; i < n1; i++)
       L[i] = arr[left + i];
   for (int i = 0; i < n2; i++)
       R[i] = arr[mid + 1 + i];
 
   int i = 0, j = 0, k = left;
   while (i < n1 && j < n2) {
       if (L[i] <= R[j]) {
           arr[k++] = L[i++];
       } else {
           arr[k++] = R[j++];
       }
   }
 
   while (i < n1) {
       arr[k++] = L[i++];
   }
   while (j < n2) {
       arr[k++] = R[j++];
   }
 
   free(L);
   free(R);
}
 
void mergeSort(int arr[], int left, int right) {
   if (left < right) {
       int mid = left + (right - left) / 2;
       mergeSort(arr, left, mid);
       mergeSort(arr, mid + 1, right);
       merge(arr, left, mid, right);
   }
}
 
// Function to measure the time taken by a sorting algorithm
void measureTime(void (*sortFunction)(int[], int), int arr[], int n, const char *algorithmName) {
   int *arrCopy = (int *)malloc(n * sizeof(int));
   for (int i = 0; i < n; i++) {
       arrCopy[i] = arr[i];
   }
 
   clock_t start = clock();
   sortFunction(arrCopy, n);
   clock_t end = clock();
   double timeTaken = (double)(end - start) / CLOCKS_PER_SEC;
 
   printf("%s took %f seconds.\n", algorithmName, timeTaken);
 
   free(arrCopy);
}
 
// Function to generate a random array
void generateRandomArray(int arr[], int n) {
   for (int i = 0; i < n; i++) {
       arr[i] = rand() % 10000;
   }
}
 
int main() {
   srand(time(NULL));
 
   int sizes[] = {1000, 2000, 3000, 4000, 5000}; // Different sizes of arrays to test
   int numSizes = sizeof(sizes) / sizeof(sizes[0]);
 
   for (int i = 0; i < numSizes; i++) {
       int size = sizes[i];
       int *arr = (int *)malloc(size * sizeof(int));
       generateRandomArray(arr, size);
 
       printf("Testing with array size: %d\n", size);
 
       measureTime(bubbleSort, arr, size, "Bubble Sort");
       measureTime([](int arr[], int n) { quickSort(arr, 0, n - 1); }, arr, size, "Quick Sort");
       measureTime([](int arr[], int n) { mergeSort(arr, 0, n - 1); }, arr, size, "Merge Sort");
 
       free(arr);
       printf("\n");
   }
 
   return 0;
}